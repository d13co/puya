contract examples.arc72.contract.ARC72Contract:
    program approval:
        subroutine examples.arc72.contract.ARC72Contract.approval_program() -> uint64:
            block@0: // L21
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L22
                examples.arc72.contract.ARC72Contract.__init__()
                goto block@2
            block@2: // entrypoint_L22
                let tmp%1#0: uint64 = (txn NumAppArgs)
                goto tmp%1#0 ? block@3 : block@14
            block@3: // abi_routing_L21
                let tmp%2#0: bytes = (txna ApplicationArgs 0)
                switch tmp%2#0 {method "arc72_ownerOf(uint256)address" => block@4, method "arc72_transferFrom(address,address,uint256)void" => block@5, method "arc72_tokenURI(uint256)byte[256]" => block@6, method "arc72_approve(address,uint256)void" => block@7, method "mint(address)void" => block@8, method "arc72_setApprovalForAll(address,bool)void" => block@9, method "arc72_totalSupply()uint256" => block@10, method "arc72_tokenByIndex(uint256)uint256" => block@11, * => block@12}
            block@4: // arc72_ownerOf_route_L42
                let tmp%3#0: uint64 = (txn OnCompletion)
                let tmp%4#0: uint64 = (! tmp%3#0)
                (assert tmp%4#0) // OnCompletion is NoOp
                let tmp%5#0: uint64 = (txn ApplicationID)
                (assert tmp%5#0) // is not creating
                let tmp%6#0: bytes = (txna ApplicationArgs 1)
                let tmp%7#0: bytes = examples.arc72.contract.ARC72Contract.arc72_ownerOf(tmp%6#0)
                let tmp%8#0: bytes = (concat 0x151f7c75 tmp%7#0)
                (log tmp%8#0)
                return 1u
            block@5: // arc72_transferFrom_route_L46
                let tmp%9#0: uint64 = (txn OnCompletion)
                let tmp%10#0: uint64 = (! tmp%9#0)
                (assert tmp%10#0) // OnCompletion is NoOp
                let tmp%11#0: uint64 = (txn ApplicationID)
                (assert tmp%11#0) // is not creating
                let tmp%12#0: bytes = (txna ApplicationArgs 1)
                let tmp%13#0: bytes = (txna ApplicationArgs 2)
                let tmp%14#0: bytes = (txna ApplicationArgs 3)
                examples.arc72.contract.ARC72Contract.arc72_transferFrom(tmp%12#0, tmp%13#0, tmp%14#0)
                return 1u
            block@6: // arc72_tokenURI_route_L71
                let tmp%15#0: uint64 = (txn OnCompletion)
                let tmp%16#0: uint64 = (! tmp%15#0)
                (assert tmp%16#0) // OnCompletion is NoOp
                let tmp%17#0: uint64 = (txn ApplicationID)
                (assert tmp%17#0) // is not creating
                let tmp%18#0: bytes = (txna ApplicationArgs 1)
                let tmp%19#0: bytes = examples.arc72.contract.ARC72Contract.arc72_tokenURI(tmp%18#0)
                let tmp%20#0: bytes = (concat 0x151f7c75 tmp%19#0)
                (log tmp%20#0)
                return 1u
            block@7: // arc72_approve_route_L75
                let tmp%21#0: uint64 = (txn OnCompletion)
                let tmp%22#0: uint64 = (! tmp%21#0)
                (assert tmp%22#0) // OnCompletion is NoOp
                let tmp%23#0: uint64 = (txn ApplicationID)
                (assert tmp%23#0) // is not creating
                let tmp%24#0: bytes = (txna ApplicationArgs 1)
                let tmp%25#0: bytes = (txna ApplicationArgs 2)
                examples.arc72.contract.ARC72Contract.arc72_approve(tmp%24#0, tmp%25#0)
                return 1u
            block@8: // mint_route_L82
                let tmp%26#0: uint64 = (txn OnCompletion)
                let tmp%27#0: uint64 = (! tmp%26#0)
                (assert tmp%27#0) // OnCompletion is NoOp
                let tmp%28#0: uint64 = (txn ApplicationID)
                (assert tmp%28#0) // is not creating
                let tmp%29#0: bytes = (txna ApplicationArgs 1)
                examples.arc72.contract.ARC72Contract.mint(tmp%29#0)
                return 1u
            block@9: // arc72_setApprovalForAll_route_L95
                let tmp%30#0: uint64 = (txn OnCompletion)
                let tmp%31#0: uint64 = (! tmp%30#0)
                (assert tmp%31#0) // OnCompletion is NoOp
                let tmp%32#0: uint64 = (txn ApplicationID)
                (assert tmp%32#0) // is not creating
                let tmp%33#0: bytes = (txna ApplicationArgs 1)
                let tmp%34#0: bytes = (txna ApplicationArgs 2)
                let tmp%35#0: uint64 = (getbit tmp%34#0 0u)
                examples.arc72.contract.ARC72Contract.arc72_setApprovalForAll(tmp%33#0, tmp%35#0)
                return 1u
            block@10: // arc72_totalSupply_route_L107
                let tmp%36#0: uint64 = (txn OnCompletion)
                let tmp%37#0: uint64 = (! tmp%36#0)
                (assert tmp%37#0) // OnCompletion is NoOp
                let tmp%38#0: uint64 = (txn ApplicationID)
                (assert tmp%38#0) // is not creating
                let tmp%39#0: bytes = examples.arc72.contract.ARC72Contract.arc72_totalSupply()
                let tmp%40#0: bytes = (concat 0x151f7c75 tmp%39#0)
                (log tmp%40#0)
                return 1u
            block@11: // arc72_tokenByIndex_route_L111
                let tmp%41#0: uint64 = (txn OnCompletion)
                let tmp%42#0: uint64 = (! tmp%41#0)
                (assert tmp%42#0) // OnCompletion is NoOp
                let tmp%43#0: uint64 = (txn ApplicationID)
                (assert tmp%43#0) // is not creating
                let tmp%44#0: bytes = (txna ApplicationArgs 1)
                let tmp%45#0: bytes = examples.arc72.contract.ARC72Contract.arc72_tokenByIndex(tmp%44#0)
                let tmp%46#0: bytes = (concat 0x151f7c75 tmp%45#0)
                (log tmp%46#0)
                return 1u
            block@12: // switch_case_default_L21
                fail // reject transaction
            block@14: // bare_routing_L21
                let tmp%47#0: uint64 = (txn OnCompletion)
                goto tmp%47#0 ? block@16 : block@15
            block@15: // create_L21
                let tmp%48#0: uint64 = (txn ApplicationID)
                let tmp%49#0: uint64 = (! tmp%48#0)
                (assert tmp%49#0) // is creating
                return 1u
            block@16: // reject_bare_on_completion_L21
                fail // reject transaction
        
        subroutine examples.arc72.contract.ARC72Contract.arc72_ownerOf(token_id: bytes) -> bytes:
            block@0: // L43
                let tmp%0#0: bytes = examples.arc72.contract.ARC72Contract._get_token(token_id#0)
                let tmp%1#0: bytes = ((extract 0 32) tmp%0#0)
                return tmp%1#0
        
        subroutine examples.arc72.contract.ARC72Contract._get_token(token_id: bytes) -> bytes:
            block@0: // L26
                let (data#0: bytes, exists#0: uint64) = (box_get token_id#0)
                goto exists#0 ? block@2 : block@1
            block@1: // if_body_L28
                let zero_address_bytes#0: bytes = (global ZeroAddress)
                let tmp%2#0: bytes = (bzero 256u)
                let encoded_tuple_buffer%4#2: bytes = (concat zero_address_bytes#0 tmp%2#0)
                let encoded_tuple_buffer%4#2: bytes = (concat encoded_tuple_buffer%4#2 zero_address_bytes#0)
                return encoded_tuple_buffer%4#2
            block@2: // after_if_else_L28
                return data#0
        
        subroutine examples.arc72.contract.ARC72Contract.arc72_transferFrom(from_address: bytes, to_address: bytes, token_id: bytes) -> void:
            block@0: // L47
                let token#0: bytes = examples.arc72.contract.ARC72Contract._get_token(token_id#0)
                let tmp%0#0: bytes = ((extract 0 32) token#0)
                let tmp%1#0: uint64 = (== tmp%0#0 from_address#0)
                (assert tmp%1#0) // From address must match owner
                let sender_address#0: bytes = (txn Sender)
                let key#0: bytes = (concat from_address#0 sender_address#0)
                let (_data#0: bytes, controller_exists#0: uint64) = (box_get key#0)
                let tmp%6#0: uint64 = (== sender_address#0 from_address#0)
                goto tmp%6#0 ? block@3 : block@1
            block@1: // or_contd_L61
                let tmp%7#0: bytes = (extract3 token#0 288u 32u)
                let tmp%8#0: uint64 = (== tmp%7#0 sender_address#0)
                goto tmp%8#0 ? block@3 : block@2
            block@2: // or_contd_L61
                goto controller_exists#0 ? block@3 : block@4
            block@3: // if_body_L60
                let token#0: bytes = ((replace2 0) token#0 to_address#0)
                examples.arc72.contract.ARC72Contract._set_token(token_id#0, token#0)
                return 
            block@4: // else_body_L60
                fail
        
        subroutine examples.arc72.contract.ARC72Contract._set_token(token_id: bytes, token: bytes) -> void:
            block@0: // L39
                (box_put token_id#0 token#0)
                return 
        
        subroutine examples.arc72.contract.ARC72Contract.arc72_tokenURI(token_id: bytes) -> bytes:
            block@0: // L72
                let tmp%0#0: bytes = examples.arc72.contract.ARC72Contract._get_token(token_id#0)
                let tmp%1#0: bytes = (extract3 tmp%0#0 32u 256u)
                return tmp%1#0
        
        subroutine examples.arc72.contract.ARC72Contract.arc72_approve(operator: bytes, token_id: bytes) -> void:
            block@0: // L76
                let token#0: bytes = examples.arc72.contract.ARC72Contract._get_token(token_id#0)
                let token#0: bytes = ((replace2 288) token#0 operator#0)
                examples.arc72.contract.ARC72Contract._set_token(token_id#0, token#0)
                return 
        
        subroutine examples.arc72.contract.ARC72Contract.mint(to: bytes) -> void:
            block@0: // L83
                let (app_global_get_ex_value%0#0: bytes, app_global_get_ex_did_exist%1#0: uint64) = (app_global_get_ex 0u "next_index")
                (assert app_global_get_ex_did_exist%1#0) // check value exists
                let len_%2#0: uint64 = (len app_global_get_ex_value%0#0)
                let no_overflow%3#0: uint64 = (<= len_%2#0 32u)
                (assert no_overflow%3#0) // overflow
                let b_zeros%4#0: bytes = (bzero 32u)
                let token_id#0: bytes = (b| app_global_get_ex_value%0#0 b_zeros%4#0)
                let zero_address_bytes#0: bytes = (global ZeroAddress)
                let tmp%5#0: bytes = (bzero 256u)
                let encoded_tuple_buffer%7#2: bytes = (concat to#0 tmp%5#0)
                let token#0: bytes = (concat encoded_tuple_buffer%7#2 zero_address_bytes#0)
                examples.arc72.contract.ARC72Contract._set_token(token_id#0, token#0)
                let (app_global_get_ex_value%8#0: bytes, app_global_get_ex_did_exist%9#0: uint64) = (app_global_get_ex 0u "next_index")
                (assert app_global_get_ex_did_exist%9#0) // check value exists
                let new_state_value%10#0: bytes = (b+ app_global_get_ex_value%8#0 1b)
                (app_global_put "next_index" new_state_value%10#0)
                return 
        
        subroutine examples.arc72.contract.ARC72Contract.arc72_setApprovalForAll(operator: bytes, approved: uint64) -> void:
            block@0: // L96
                let sender_address#0: bytes = (txn Sender)
                let key#0: bytes = (concat sender_address#0 operator#0)
                goto approved#0 ? block@1 : block@2
            block@1: // if_body_L102
                (box_put key#0 "")
                goto block@3
            block@2: // else_body_L102
                (box_del key#0)
                goto block@3
            block@3: // after_if_else_L102
                return 
        
        subroutine examples.arc72.contract.ARC72Contract.arc72_totalSupply() -> bytes:
            block@0: // L108
                let (app_global_get_ex_value%0#0: bytes, app_global_get_ex_did_exist%1#0: uint64) = (app_global_get_ex 0u "next_index")
                (assert app_global_get_ex_did_exist%1#0) // check value exists
                let len_%2#0: uint64 = (len app_global_get_ex_value%0#0)
                let no_overflow%3#0: uint64 = (<= len_%2#0 32u)
                (assert no_overflow%3#0) // overflow
                let b_zeros%4#0: bytes = (bzero 32u)
                let tmp%5#0: bytes = (b| app_global_get_ex_value%0#0 b_zeros%4#0)
                return tmp%5#0
        
        subroutine examples.arc72.contract.ARC72Contract.arc72_tokenByIndex(index: bytes) -> bytes:
            block@0: // L112
                return index#0
        
        subroutine examples.arc72.contract.ARC72Contract.__init__() -> void:
            block@0: // L22
                (app_global_put "next_index" 0b)
                return 
    
    program clear-state:
        subroutine examples.arc72.contract.ARC72Contract.clear_state_program() -> uint64:
            block@0: // L21
                return 1u
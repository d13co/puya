{
    "hints": {
        "create()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_application()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "append_leaf(byte[],byte[33][3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_leaf(byte[],byte[],byte[33][3])void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpleGFtcGxlcy5tZXJrbGUuY29udHJhY3QuTWVya2xlVHJlZS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gbWVya2xlL2NvbnRyYWN0LnB5OjI5CiAgICAvLyBjbGFzcyBNZXJrbGVUcmVlKGFyYzQuQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "root": {
                    "type": "bytes",
                    "key": "root"
                },
                "size": {
                    "type": "uint64",
                    "key": "size"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "MerkleTree",
        "methods": [
            {
                "name": "create",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_application",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "append_leaf",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "data"
                    },
                    {
                        "type": "byte[33][3]",
                        "name": "path"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "update_leaf",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "old_data"
                    },
                    {
                        "type": "byte[]",
                        "name": "new_data"
                    },
                    {
                        "type": "byte[33][3]",
                        "name": "path"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}
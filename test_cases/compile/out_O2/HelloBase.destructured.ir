contract test_cases.compile.factory.HelloBase:
    program approval:
        subroutine test_cases.compile.factory.HelloBase.approval_program() -> bool:
            block@0: // L13
                let app_id%0#0: uint64 = (txn ApplicationID)
                goto app_id%0#0 ? block@2 : block@1
            block@1: // on_create_L15
                test_cases.compile.factory.HelloBase.__init__()
                goto block@2
            block@2: // entrypoint_L15
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@3 : block@8
            block@3: // abi_routing_L13
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "delete()void" => block@4, method "greet(string)string" => block@5, * => fail // reject transaction}
            block@4: // delete_route_L18
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 DeleteApplication)
                (assert tmp%3#0) // OnCompletion is DeleteApplication
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                test_cases.compile.factory.HelloBase.delete()
                return 1u
            block@5: // greet_route_L22
                let tmp%5#0: uint64 = (txn OnCompletion)
                let tmp%6#0: bool = (! tmp%5#0)
                (assert tmp%6#0) // OnCompletion is NoOp
                let tmp%7#0: bool = (txn ApplicationID)
                (assert tmp%7#0) // is not creating
                let tmp%8#0: bytes = (txna ApplicationArgs 1)
                let tmp%9#0: bytes = ((extract 2 0) tmp%8#0)
                let tmp%10#0: bytes = test_cases.compile.factory.HelloBase.greet(tmp%9#0)
                let length%0#0: uint64 = (len tmp%10#0)
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%11#0: bytes = (concat value_as_uint16%0#0 tmp%10#0)
                let tmp%12#0: bytes = (concat 0x151f7c75 tmp%11#0)
                (log tmp%12#0)
                return 1u
            block@8: // bare_routing_L13
                let tmp%13#0: uint64 = (txn OnCompletion)
                let not%tmp%13#0: bool = (! tmp%13#0)
                (assert not%tmp%13#0) // reject transaction
                let tmp%14#0: bool = (txn ApplicationID)
                let tmp%15#0: bool = (! tmp%14#0)
                (assert tmp%15#0) // is creating
                return 1u
        
        subroutine test_cases.compile.factory.HelloBase.delete() -> void:
            block@0: // L18
                return 
        
        subroutine test_cases.compile.factory.HelloBase.greet(name: bytes) -> bytes:
            block@0: // L22
                let (greeting_value%0#0: bytes, greeting_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
                (assert greeting_exists%0#0) // check greeting exists
                let tmp%0#0: bytes = (concat greeting_value%0#0 " ")
                let tmp%1#0: bytes = (concat tmp%0#0 name#0)
                return tmp%1#0
        
        subroutine test_cases.compile.factory.HelloBase.__init__() -> void:
            block@0: // L15
                (app_global_put "greeting" "")
                return 
    
    program clear-state:
        subroutine test_cases.compile.factory.HelloBase.clear_state_program() -> bool:
            block@0: // L13
                return 1u
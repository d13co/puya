contract test_cases.compile.factory.HelloFactory:
    program approval:
        subroutine test_cases.compile.factory.HelloFactory.approval_program() -> bool:
            block@0: // L27
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@5
            block@1: // abi_routing_L27
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "do_some_stuff()void" => block@2, * => fail // reject transaction}
            block@2: // do_some_stuff_route_L29
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                test_cases.compile.factory.HelloFactory.do_some_stuff()
                return 1u
            block@5: // bare_routing_L27
                let tmp%5#0: uint64 = (txn OnCompletion)
                let not%tmp%5#0: bool = (! tmp%5#0)
                (assert not%tmp%5#0) // reject transaction
                let tmp%6#0: bool = (txn ApplicationID)
                let tmp%7#0: bool = (! tmp%6#0)
                (assert tmp%7#0) // is creating
                return 1u
        
        subroutine test_cases.compile.factory.HelloFactory.do_some_stuff() -> void:
            block@0: // L29
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=approval)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=clear_state)
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) "\x00\x05hello")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "hello world")
                (assert tmp%3#0)
                return 
    
    program clear-state:
        subroutine test_cases.compile.factory.HelloFactory.clear_state_program() -> bool:
            block@0: // L27
                return 1u
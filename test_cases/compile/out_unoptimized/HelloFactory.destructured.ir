contract test_cases.compile.factory.HelloFactory:
    program approval:
        subroutine test_cases.compile.factory.HelloFactory.approval_program() -> bool:
            block@0: // L27
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@6
            block@1: // abi_routing_L27
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "test_get_program()void" => block@2, method "test_abi_call()void" => block@3, * => block@4}
            block@2: // test_get_program_route_L29
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (== tmp%2#0 NoOp)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_get_program()
                return 1u
            block@3: // test_abi_call_route_L59
                let tmp%5#0: uint64 = (txn OnCompletion)
                let tmp%6#0: bool = (== tmp%5#0 NoOp)
                (assert tmp%6#0) // OnCompletion is NoOp
                let tmp%7#0: bool = (txn ApplicationID)
                (assert tmp%7#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_abi_call()
                return 1u
            block@4: // switch_case_default_L27
                goto block@5
            block@5: // switch_case_next_L27
                fail // reject transaction
            block@6: // bare_routing_L27
                let tmp%8#0: uint64 = (txn OnCompletion)
                switch tmp%8#0 {0u => block@7, * => block@8}
            block@7: // create_L27
                let tmp%9#0: bool = (txn ApplicationID)
                let tmp%10#0: bool = (! tmp%9#0)
                (assert tmp%10#0) // is creating
                return 1u
            block@8: // reject_bare_on_completion_L27
                fail // reject transaction
        
        subroutine test_cases.compile.factory.HelloFactory.test_get_program() -> void:
            block@0: // L29
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=approval)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=clear_state)
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) "\x00\x05hello")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L33
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L43
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let awst_tmp%0#0: bytes = txn.LastLog#0
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%0#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%0#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: bool = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let result#0: bytes = value%0#0
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L50
                itxn_submit
                let tmp%3#0: bool = (== result#0 "\x00\x0bhello world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_abi_call() -> void:
            block@0: // L59
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=approval)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=clear_state)
                let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=global_uints)
                let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=global_bytes)
                let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=local_uints)
                let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=local_bytes)
                let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=extra_program_pages)
                ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
                ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
                ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
                ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
                ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) "\x00\x05hello")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@1
            block@1: // next_txn_L61
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                let inner_txn_params%1%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
                ((itxn_field ApplicationID) inner_txn_params%1%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@2
            block@2: // next_txn_L69
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                let value%0#0: bytes = tmp%0#0
                let check%0#0: bool = tmp%2#0
                (assert check%0#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) value%0#0)
                itxn_begin
                let inner_txn_params%2%%param_ApplicationID_idx_0#0: uint64 = hello_app#0
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) inner_txn_params%2%%param_ApplicationID_idx_0#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                goto block@3
            block@3: // next_txn_L72
                itxn_submit
                let tmp%3#0: bool = (== result#0 "hello world")
                (assert tmp%3#0)
                return 
    
    program clear-state:
        subroutine test_cases.compile.factory.HelloFactory.clear_state_program() -> bool:
            block@0: // L27
                return 1u
#pragma version 10

test_cases.compile.factory.HelloFactory.approval_program:
    // compile/factory.py:27
    // class HelloFactory(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    method "test_get_program()void"
    method "test_abi_call()void"
    txna ApplicationArgs 0
    match main_test_get_program_route@2 main_test_abi_call_route@3
    err // reject transaction

main_test_get_program_route@2:
    // compile/factory.py:29
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub test_get_program
    int 1
    return

main_test_abi_call_route@3:
    // compile/factory.py:59
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub test_abi_call
    int 1
    return

main_bare_routing@6:
    // compile/factory.py:27
    // class HelloFactory(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// test_cases.compile.factory.HelloFactory.test_get_program() -> void:
test_get_program:
    // compile/factory.py:29-30
    // @arc4.abimethod()
    // def test_get_program(self) -> None:
    proto 0 0
    // compile/factory.py:33-39
    // itxn.ApplicationCall(
    //     app_args=(arc4.arc4_signature("create(string)void"), arc4.String("hello")),
    //     approval_program=get_approval_program(Hello),
    //     clear_state_program=get_clear_state_program(Hello),
    //     global_num_bytes=1,
    // )
    // .submit()
    itxn_begin
    // compile/factory.py:35
    // approval_program=get_approval_program(Hello),
    byte base64 CiABASYBCGdyZWV0aW5nggMEIN86VAQkN408BNCiggA2GgCOAwABABQAIgAxGRREMRgURDYaAVcCAIgAMyJDMRmBBRJEMRhEiAAtIkMxGRREMRhENhoBVwIAiAAfSRUWVwYCTFCABBUffHVMULAiQ4oBACiL/2eJigAAiYoBAYEAKGVEgAEgUIv/UIk=
    // compile/factory.py:36
    // clear_state_program=get_clear_state_program(Hello),
    byte base64 CoEBQw==
    // compile/factory.py:37
    // global_num_bytes=1,
    int 1
    itxn_field GlobalNumByteSlice
    itxn_field ClearStateProgramPages
    itxn_field ApprovalProgramPages
    // compile/factory.py:34
    // app_args=(arc4.arc4_signature("create(string)void"), arc4.String("hello")),
    method "create(string)void"
    itxn_field ApplicationArgs
    byte "\x00\x05hello"
    itxn_field ApplicationArgs
    // compile/factory.py:33
    // itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // compile/factory.py:33-39
    // itxn.ApplicationCall(
    //     app_args=(arc4.arc4_signature("create(string)void"), arc4.String("hello")),
    //     approval_program=get_approval_program(Hello),
    //     clear_state_program=get_clear_state_program(Hello),
    //     global_num_bytes=1,
    // )
    // .submit()
    itxn_submit
    // compile/factory.py:33-40
    // itxn.ApplicationCall(
    //     app_args=(arc4.arc4_signature("create(string)void"), arc4.String("hello")),
    //     approval_program=get_approval_program(Hello),
    //     clear_state_program=get_clear_state_program(Hello),
    //     global_num_bytes=1,
    // )
    // .submit()
    // .created_app
    itxn CreatedApplicationID
    // compile/factory.py:43-47
    // # call the new app
    // txn = itxn.ApplicationCall(
    //     app_args=(arc4.arc4_signature("greet(string)string"), arc4.String("world")),
    //     app_id=hello_app,
    // ).submit()
    itxn_begin
    dup
    itxn_field ApplicationID
    // compile/factory.py:45
    // app_args=(arc4.arc4_signature("greet(string)string"), arc4.String("world")),
    method "greet(string)string"
    itxn_field ApplicationArgs
    byte "\x00\x05world"
    itxn_field ApplicationArgs
    // compile/factory.py:43-44
    // # call the new app
    // txn = itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // compile/factory.py:43-47
    // # call the new app
    // txn = itxn.ApplicationCall(
    //     app_args=(arc4.arc4_signature("greet(string)string"), arc4.String("world")),
    //     app_id=hello_app,
    // ).submit()
    itxn_submit
    itxn LastLog
    // compile/factory.py:48
    // result = arc4.String.from_log(txn.last_log)
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // compile/factory.py:50-55
    // # delete the app
    // itxn.ApplicationCall(
    //     app_id=hello_app,
    //     app_args=(arc4.arc4_signature("delete()void"),),
    //     on_completion=OnCompleteAction.DeleteApplication,
    // ).submit()
    itxn_begin
    // compile/factory.py:54
    // on_completion=OnCompleteAction.DeleteApplication,
    int DeleteApplication
    itxn_field OnCompletion
    // compile/factory.py:53
    // app_args=(arc4.arc4_signature("delete()void"),),
    method "delete()void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationID
    // compile/factory.py:50-51
    // # delete the app
    // itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // compile/factory.py:50-55
    // # delete the app
    // itxn.ApplicationCall(
    //     app_id=hello_app,
    //     app_args=(arc4.arc4_signature("delete()void"),),
    //     on_completion=OnCompleteAction.DeleteApplication,
    // ).submit()
    itxn_submit
    // compile/factory.py:57
    // assert result == "hello world"
    byte "\x00\x0bhello world"
    ==
    assert
    retsub


// test_cases.compile.factory.HelloFactory.test_abi_call() -> void:
test_abi_call:
    // compile/factory.py:59-60
    // @arc4.abimethod()
    // def test_abi_call(self) -> None:
    proto 0 0
    // compile/factory.py:61-67
    // # create app
    // hello_app = arc4.abi_call(
    //     Hello.create,
    //     "hello",
    //     # approval_program, clear_state_program, global_num_*, local_num_*, and
    //     # extra_program_pages are automatically set based on Hello contract
    // ).created_app
    itxn_begin
    byte base64 CiABASYBCGdyZWV0aW5nggMEIN86VAQkN408BNCiggA2GgCOAwABABQAIgAxGRREMRgURDYaAVcCAIgAMyJDMRmBBRJEMRhEiAAtIkMxGRREMRhENhoBVwIAiAAfSRUWVwYCTFCABBUffHVMULAiQ4oBACiL/2eJigAAiYoBAYEAKGVEgAEgUIv/UIk=
    byte base64 CoEBQw==
    int 0
    int 1
    int 0
    dupn 2
    itxn_field ExtraProgramPages
    itxn_field LocalNumByteSlice
    itxn_field LocalNumUint
    itxn_field GlobalNumByteSlice
    itxn_field GlobalNumUint
    itxn_field ClearStateProgramPages
    itxn_field ApprovalProgramPages
    method "create(string)void"
    itxn_field ApplicationArgs
    // compile/factory.py:64
    // "hello",
    byte "\x00\x05hello"
    itxn_field ApplicationArgs
    // compile/factory.py:61-67
    // # create app
    // hello_app = arc4.abi_call(
    //     Hello.create,
    //     "hello",
    //     # approval_program, clear_state_program, global_num_*, local_num_*, and
    //     # extra_program_pages are automatically set based on Hello contract
    // ).created_app
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn CreatedApplicationID
    // compile/factory.py:69-70
    // # call the new app
    // result, _txn = arc4.abi_call(Hello.greet, "world", app_id=hello_app)
    itxn_begin
    dup
    itxn_field ApplicationID
    method "greet(string)string"
    itxn_field ApplicationArgs
    byte "\x00\x05world"
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 2 0
    // compile/factory.py:72-77
    // # delete the app
    // arc4.abi_call(
    //     Hello.delete,
    //     app_id=hello_app,
    //     # on_complete is inferred from Hello.delete ARC4 definition
    // )
    itxn_begin
    int DeleteApplication
    itxn_field OnCompletion
    swap
    itxn_field ApplicationID
    method "delete()void"
    itxn_field ApplicationArgs
    int appl
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    itxn_submit
    // compile/factory.py:79
    // assert result == "hello world"
    byte "hello world"
    ==
    assert
    retsub

contract test_cases.compile.factory.HelloFactory:
    program approval:
        subroutine test_cases.compile.factory.HelloFactory.approval_program() -> bool:
            block@0: // L54
                let tmp%0#0: bool = (txn NumAppArgs)
                goto tmp%0#0 ? block@1 : block@10
            block@1: // abi_routing_L54
                let tmp%1#0: bytes = (txna ApplicationArgs 0)
                switch tmp%1#0 {method "test_get_program()void" => block@2, method "test_get_program_tmpl()void" => block@3, method "test_get_program_prfx()void" => block@4, method "test_abi_call()void" => block@5, method "test_abi_call_tmpl()void" => block@6, method "test_abi_call_prfx()void" => block@7, * => fail // reject transaction}
            block@2: // test_get_program_route_L56
                let tmp%2#0: uint64 = (txn OnCompletion)
                let tmp%3#0: bool = (! tmp%2#0)
                (assert tmp%3#0) // OnCompletion is NoOp
                let tmp%4#0: bool = (txn ApplicationID)
                (assert tmp%4#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_get_program()
                return 1u
            block@3: // test_get_program_tmpl_route_L86
                let tmp%5#0: uint64 = (txn OnCompletion)
                let tmp%6#0: bool = (! tmp%5#0)
                (assert tmp%6#0) // OnCompletion is NoOp
                let tmp%7#0: bool = (txn ApplicationID)
                (assert tmp%7#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_get_program_tmpl()
                return 1u
            block@4: // test_get_program_prfx_route_L116
                let tmp%8#0: uint64 = (txn OnCompletion)
                let tmp%9#0: bool = (! tmp%8#0)
                (assert tmp%9#0) // OnCompletion is NoOp
                let tmp%10#0: bool = (txn ApplicationID)
                (assert tmp%10#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_get_program_prfx()
                return 1u
            block@5: // test_abi_call_route_L146
                let tmp%11#0: uint64 = (txn OnCompletion)
                let tmp%12#0: bool = (! tmp%11#0)
                (assert tmp%12#0) // OnCompletion is NoOp
                let tmp%13#0: bool = (txn ApplicationID)
                (assert tmp%13#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_abi_call()
                return 1u
            block@6: // test_abi_call_tmpl_route_L168
                let tmp%14#0: uint64 = (txn OnCompletion)
                let tmp%15#0: bool = (! tmp%14#0)
                (assert tmp%15#0) // OnCompletion is NoOp
                let tmp%16#0: bool = (txn ApplicationID)
                (assert tmp%16#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_abi_call_tmpl()
                return 1u
            block@7: // test_abi_call_prfx_route_L188
                let tmp%17#0: uint64 = (txn OnCompletion)
                let tmp%18#0: bool = (! tmp%17#0)
                (assert tmp%18#0) // OnCompletion is NoOp
                let tmp%19#0: bool = (txn ApplicationID)
                (assert tmp%19#0) // is not creating
                test_cases.compile.factory.HelloFactory.test_abi_call_prfx()
                return 1u
            block@10: // bare_routing_L54
                let tmp%20#0: uint64 = (txn OnCompletion)
                let not%tmp%20#0: bool = (! tmp%20#0)
                (assert not%tmp%20#0) // reject transaction
                let tmp%21#0: bool = (txn ApplicationID)
                let tmp%22#0: bool = (! tmp%21#0)
                (assert tmp%22#0) // is creating
                return 1u
        
        subroutine test_cases.compile.factory.HelloFactory.test_get_program() -> void:
            block@0: // L56
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=approval)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=clear_state)
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) "\x00\x05hello")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "\x00\x0bhello world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_get_program_tmpl() -> void:
            block@0: // L86
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.HelloTmpl', field=approval, TMPL_GREETING=686579)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.HelloTmpl', field=clear_state)
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "\x00\they world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_get_program_prfx() -> void:
            block@0: // L116
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.HelloPrfx', field=approval, PRFX_GREETING=6869)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.HelloPrfx', field=clear_state)
                ((itxn_field GlobalNumByteSlice) 1u)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let txn.LastLog#0: bytes = (itxn LastLog)
                let result#0: bytes = ((extract 4 0) txn.LastLog#0)
                let tmp%1#0: bytes = ((extract 0 4) txn.LastLog#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "\x00\x08hi world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_abi_call() -> void:
            block@0: // L146
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=approval)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.Hello', field=clear_state)
                let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=global_uints)
                let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=global_bytes)
                let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=local_uints)
                let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=local_bytes)
                let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = compiled('test_cases.compile.factory.Hello', field=extra_program_pages)
                ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
                ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
                ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
                ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
                ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create(string)void")
                ((itxn_field ApplicationArgs) "\x00\x05hello")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "hello world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_abi_call_tmpl() -> void:
            block@0: // L168
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.HelloTmpl', field=approval, TMPL_GREETING=746d706c32)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.HelloTmpl', field=clear_state, TMPL_GREETING=746d706c32)
                let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloTmpl', field=global_uints, TMPL_GREETING=746d706c32)
                let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloTmpl', field=global_bytes, TMPL_GREETING=746d706c32)
                let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloTmpl', field=local_uints, TMPL_GREETING=746d706c32)
                let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloTmpl', field=local_bytes, TMPL_GREETING=746d706c32)
                let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloTmpl', field=extra_program_pages, TMPL_GREETING=746d706c32)
                ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
                ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
                ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
                ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
                ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "tmpl2 world")
                (assert tmp%3#0)
                return 
        
        subroutine test_cases.compile.factory.HelloFactory.test_abi_call_prfx() -> void:
            block@0: // L188
                itxn_begin
                let inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.HelloPrfx', field=approval, PRFX_GREETING=7072667832)
                let inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0: bytes = compiled('test_cases.compile.factory.HelloPrfx', field=clear_state, PRFX_GREETING=7072667832)
                let inner_txn_params%0%%param_GlobalNumUint_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloPrfx', field=global_uints, PRFX_GREETING=7072667832)
                let inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloPrfx', field=global_bytes, PRFX_GREETING=7072667832)
                let inner_txn_params%0%%param_LocalNumUint_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloPrfx', field=local_uints, PRFX_GREETING=7072667832)
                let inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloPrfx', field=local_bytes, PRFX_GREETING=7072667832)
                let inner_txn_params%0%%param_ExtraProgramPages_idx_0#0: uint64 = compiled('test_cases.compile.factory.HelloPrfx', field=extra_program_pages, PRFX_GREETING=7072667832)
                ((itxn_field ExtraProgramPages) inner_txn_params%0%%param_ExtraProgramPages_idx_0#0)
                ((itxn_field LocalNumByteSlice) inner_txn_params%0%%param_LocalNumByteSlice_idx_0#0)
                ((itxn_field LocalNumUint) inner_txn_params%0%%param_LocalNumUint_idx_0#0)
                ((itxn_field GlobalNumByteSlice) inner_txn_params%0%%param_GlobalNumByteSlice_idx_0#0)
                ((itxn_field GlobalNumUint) inner_txn_params%0%%param_GlobalNumUint_idx_0#0)
                ((itxn_field ClearStateProgramPages) inner_txn_params%0%%param_ClearStateProgramPages_idx_0#0)
                ((itxn_field ApprovalProgramPages) inner_txn_params%0%%param_ApprovalProgramPages_idx_0#0)
                ((itxn_field ApplicationArgs) method "create()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let hello_app#0: uint64 = (itxn CreatedApplicationID)
                itxn_begin
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "greet(string)string")
                ((itxn_field ApplicationArgs) "\x00\x05world")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let awst_tmp%1#0: bytes = (itxn LastLog)
                let tmp%0#0: bytes = ((extract 4 0) awst_tmp%1#0)
                let tmp%1#0: bytes = ((extract 0 4) awst_tmp%1#0)
                let tmp%2#0: bool = (== tmp%1#0 0x151f7c75)
                (assert tmp%2#0) // ARC4 prefix is valid
                let result#0: bytes = ((extract 2 0) tmp%0#0)
                itxn_begin
                ((itxn_field OnCompletion) DeleteApplication)
                ((itxn_field ApplicationID) hello_app#0)
                ((itxn_field ApplicationArgs) method "delete()void")
                ((itxn_field TypeEnum) appl)
                ((itxn_field Fee) 0u)
                itxn_submit
                let tmp%3#0: bool = (== result#0 "prfx2 world")
                (assert tmp%3#0)
                return 
    
    program clear-state:
        subroutine test_cases.compile.factory.HelloFactory.clear_state_program() -> bool:
            block@0: // L54
                return 1u
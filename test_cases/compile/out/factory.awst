contract HelloBase
{
  globals {
    ['greeting']: algopy.String
  }
  
  constructor()
  {
    this.greeting: algopy.String = ''
  }
  
  abimethod delete(): None
  {
  }
  
  abimethod greet(name: algopy.String): algopy.String
  {
    return this.greeting + ' ' + name
  }
}

contract Hello extends (test_cases.compile.factory::HelloBase)
{
  abimethod create(greeting: algopy.String): None
  {
    this.greeting: algopy.String = greeting
  }
}

contract HelloTmpl extends (test_cases.compile.factory::HelloBase)
{
  constructor()
  {
    this.greeting: algopy.String = TemplateVar[algopy.String](TMPL_GREETING)
  }
  
  abimethod create(): None
  {
  }
}

contract HelloPrfx extends (test_cases.compile.factory::HelloBase)
{
  constructor()
  {
    this.greeting: algopy.String = TemplateVar[algopy.String](PRFX_GREETING)
  }
  
  abimethod create(): None
  {
  }
}

contract HelloFactory
{
  abimethod test_get_program(): None
  {
    hello_app: algopy.Application = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("create(string)void"), arc4_encode('hello', algopy.arc4.String)), ApprovalProgramPages=compiled('test_cases.compile.factory.Hello', field=approval), ClearStateProgramPages=compiled('test_cases.compile.factory.Hello', field=clear_state), GlobalNumByteSlice=1u)).CreatedApplicationID
    txn: algopy.itxn.ApplicationCallInnerTransaction = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))
    result: algopy.arc4.String = reinterpret_cast<algopy.arc4.String>(checked_maybe((extract<4, 0>(SINGLE_EVAL(id=0, source=txn.LastLog)), extract<0, 4>(SINGLE_EVAL(id=0, source=txn.LastLog)) == hex<"151F7C75">)))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationID=hello_app, ApplicationArgs=(Method("delete()void")), OnCompletion=DeleteApplication))
    assert(reinterpret_cast<algopy.Bytes>(result) == reinterpret_cast<algopy.Bytes>(arc4_encode('hello world', algopy.arc4.String)))
  }
  
  abimethod test_get_program_tmpl(): None
  {
    hello_app: algopy.Application = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("create()void")), ApprovalProgramPages=compiled('test_cases.compile.factory.HelloTmpl', field=approval), ClearStateProgramPages=compiled('test_cases.compile.factory.HelloTmpl', field=clear_state), GlobalNumByteSlice=1u)).CreatedApplicationID
    txn: algopy.itxn.ApplicationCallInnerTransaction = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))
    result: algopy.arc4.String = reinterpret_cast<algopy.arc4.String>(checked_maybe((extract<4, 0>(SINGLE_EVAL(id=1, source=txn.LastLog)), extract<0, 4>(SINGLE_EVAL(id=1, source=txn.LastLog)) == hex<"151F7C75">)))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationID=hello_app, ApplicationArgs=(Method("delete()void")), OnCompletion=DeleteApplication))
    assert(reinterpret_cast<algopy.Bytes>(result) == reinterpret_cast<algopy.Bytes>(arc4_encode('hey world', algopy.arc4.String)))
  }
  
  abimethod test_get_program_prfx(): None
  {
    hello_app: algopy.Application = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("create()void")), ApprovalProgramPages=compiled('test_cases.compile.factory.HelloPrfx', field=approval), ClearStateProgramPages=compiled('test_cases.compile.factory.HelloPrfx', field=clear_state), GlobalNumByteSlice=1u)).CreatedApplicationID
    txn: algopy.itxn.ApplicationCallInnerTransaction = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))
    result: algopy.arc4.String = reinterpret_cast<algopy.arc4.String>(checked_maybe((extract<4, 0>(SINGLE_EVAL(id=2, source=txn.LastLog)), extract<0, 4>(SINGLE_EVAL(id=2, source=txn.LastLog)) == hex<"151F7C75">)))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationID=hello_app, ApplicationArgs=(Method("delete()void")), OnCompletion=DeleteApplication))
    assert(reinterpret_cast<algopy.Bytes>(result) == reinterpret_cast<algopy.Bytes>(arc4_encode('hi world', algopy.arc4.String)))
  }
  
  abimethod test_abi_call(): None
  {
    hello_app: algopy.Application = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("create(string)void"), arc4_encode('hello', algopy.arc4.String)), ApprovalProgramPages=compiled('test_cases.compile.factory.Hello', field=approval), ClearStateProgramPages=compiled('test_cases.compile.factory.Hello', field=clear_state), GlobalNumUint=compiled('test_cases.compile.factory.Hello', field=global_uints), GlobalNumByteSlice=compiled('test_cases.compile.factory.Hello', field=global_bytes), LocalNumUint=compiled('test_cases.compile.factory.Hello', field=local_uints), LocalNumByteSlice=compiled('test_cases.compile.factory.Hello', field=local_bytes), ExtraProgramPages=compiled('test_cases.compile.factory.Hello', field=extra_program_pages))).CreatedApplicationID
    (result, _txn): tuple[algopy.String, algopy.itxn.ApplicationCallInnerTransaction] = (arc4_decode(reinterpret_cast<algopy.arc4.String>(checked_maybe((extract<4, 0>(SINGLE_EVAL(id=3, source=SINGLE_EVAL(id=4, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))).LastLog)), extract<0, 4>(SINGLE_EVAL(id=3, source=SINGLE_EVAL(id=4, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))).LastLog)) == hex<"151F7C75">))), algopy.String), SINGLE_EVAL(id=4, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("delete()void")), ApplicationID=hello_app, OnCompletion=DeleteApplication))
    assert(result == 'hello world')
  }
  
  abimethod test_abi_call_tmpl(): None
  {
    hello_app: algopy.Application = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("create()void")), ApprovalProgramPages=compiled('test_cases.compile.factory.HelloTmpl', field=approval), ClearStateProgramPages=compiled('test_cases.compile.factory.HelloTmpl', field=clear_state), GlobalNumUint=compiled('test_cases.compile.factory.HelloTmpl', field=global_uints), GlobalNumByteSlice=compiled('test_cases.compile.factory.HelloTmpl', field=global_bytes), LocalNumUint=compiled('test_cases.compile.factory.HelloTmpl', field=local_uints), LocalNumByteSlice=compiled('test_cases.compile.factory.HelloTmpl', field=local_bytes), ExtraProgramPages=compiled('test_cases.compile.factory.HelloTmpl', field=extra_program_pages))).CreatedApplicationID
    (result, _txn): tuple[algopy.String, algopy.itxn.ApplicationCallInnerTransaction] = (arc4_decode(reinterpret_cast<algopy.arc4.String>(checked_maybe((extract<4, 0>(SINGLE_EVAL(id=5, source=SINGLE_EVAL(id=6, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))).LastLog)), extract<0, 4>(SINGLE_EVAL(id=5, source=SINGLE_EVAL(id=6, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))).LastLog)) == hex<"151F7C75">))), algopy.String), SINGLE_EVAL(id=6, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("delete()void")), ApplicationID=hello_app, OnCompletion=DeleteApplication))
    assert(result == 'tmpl2 world')
  }
  
  abimethod test_abi_call_prfx(): None
  {
    hello_app: algopy.Application = submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("create()void")), ApprovalProgramPages=compiled('test_cases.compile.factory.HelloPrfx', field=approval), ClearStateProgramPages=compiled('test_cases.compile.factory.HelloPrfx', field=clear_state), GlobalNumUint=compiled('test_cases.compile.factory.HelloPrfx', field=global_uints), GlobalNumByteSlice=compiled('test_cases.compile.factory.HelloPrfx', field=global_bytes), LocalNumUint=compiled('test_cases.compile.factory.HelloPrfx', field=local_uints), LocalNumByteSlice=compiled('test_cases.compile.factory.HelloPrfx', field=local_bytes), ExtraProgramPages=compiled('test_cases.compile.factory.HelloPrfx', field=extra_program_pages))).CreatedApplicationID
    (result, _txn): tuple[algopy.String, algopy.itxn.ApplicationCallInnerTransaction] = (arc4_decode(reinterpret_cast<algopy.arc4.String>(checked_maybe((extract<4, 0>(SINGLE_EVAL(id=7, source=SINGLE_EVAL(id=8, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))).LastLog)), extract<0, 4>(SINGLE_EVAL(id=7, source=SINGLE_EVAL(id=8, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))).LastLog)) == hex<"151F7C75">))), algopy.String), SINGLE_EVAL(id=8, source=submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("greet(string)string"), arc4_encode('world', algopy.arc4.String)), ApplicationID=hello_app))))
    submit_txn(create_inner_transaction(Fee=0u, TypeEnum=appl, ApplicationArgs=(Method("delete()void")), ApplicationID=hello_app, OnCompletion=DeleteApplication))
    assert(result == 'prfx2 world')
  }
}
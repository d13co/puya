{
    "hints": {
        "test_get_program()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_get_program_tmpl()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_get_program_prfx()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_abi_call()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_abi_call_tmpl()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "test_abi_call_prfx()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgp0ZXN0X2Nhc2VzLmNvbXBpbGUuZmFjdG9yeS5IZWxsb0ZhY3RvcnkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIGNvbXBpbGUvZmFjdG9yeS5weTo1NAogICAgLy8gY2xhc3MgSGVsbG9GYWN0b3J5KEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "HelloFactory",
        "methods": [
            {
                "name": "test_get_program",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_get_program_tmpl",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_get_program_prfx",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_abi_call",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_abi_call_tmpl",
                "args": [],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "test_abi_call_prfx",
                "args": [],
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}
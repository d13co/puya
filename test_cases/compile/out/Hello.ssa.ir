contract test_cases.compile.factory.Hello:
    program approval:
        subroutine test_cases.compile.factory.Hello.approval_program() -> bool:
            block@0: // L12
                let tmp%0#0: bytes = (txna ApplicationArgs 0)
                switch tmp%0#0 {method "create(string)void" => block@1, method "delete()void" => block@2, method "greet(string)string" => block@3, * => block@4}
            block@1: // create_route_L14
                let tmp%1#0: uint64 = (txn OnCompletion)
                let tmp%2#0: bool = (== tmp%1#0 NoOp)
                (assert tmp%2#0) // OnCompletion is NoOp
                let tmp%3#0: bool = (txn ApplicationID)
                let tmp%4#0: bool = (! tmp%3#0)
                (assert tmp%4#0) // is creating
                let tmp%5#0: bytes = (txna ApplicationArgs 1)
                let tmp%6#0: bytes = ((extract 2 0) tmp%5#0)
                test_cases.compile.factory.Hello.create(tmp%6#0)
                return 1u
            block@2: // delete_route_L18
                let tmp%7#0: uint64 = (txn OnCompletion)
                let tmp%8#0: bool = (== tmp%7#0 DeleteApplication)
                (assert tmp%8#0) // OnCompletion is DeleteApplication
                let tmp%9#0: bool = (txn ApplicationID)
                (assert tmp%9#0) // is not creating
                test_cases.compile.factory.Hello.delete()
                return 1u
            block@3: // greet_route_L22
                let tmp%10#0: uint64 = (txn OnCompletion)
                let tmp%11#0: bool = (== tmp%10#0 NoOp)
                (assert tmp%11#0) // OnCompletion is NoOp
                let tmp%12#0: bool = (txn ApplicationID)
                (assert tmp%12#0) // is not creating
                let tmp%13#0: bytes = (txna ApplicationArgs 1)
                let tmp%14#0: bytes = ((extract 2 0) tmp%13#0)
                let tmp%15#0: bytes = test_cases.compile.factory.Hello.greet(tmp%14#0)
                let length%0#0: uint64 = (len tmp%15#0)
                let value_as_bytes%0#0: bytes = (itob length%0#0)
                let value_as_uint16%0#0: bytes = ((extract 6 2) value_as_bytes%0#0)
                let tmp%16#0: bytes = (concat value_as_uint16%0#0 tmp%15#0)
                let tmp%17#0: bytes = (concat 0x151f7c75 tmp%16#0)
                (log tmp%17#0)
                return 1u
            block@4: // switch_case_default_L12
                goto block@5
            block@5: // switch_case_next_L12
                fail // reject transaction
        
        subroutine test_cases.compile.factory.Hello.create(greeting: bytes) -> void:
            block@0: // L14
                (app_global_put "greeting" greeting#0)
                return 
        
        subroutine test_cases.compile.factory.Hello.delete() -> void:
            block@0: // L18
                return 
        
        subroutine test_cases.compile.factory.Hello.greet(name: bytes) -> bytes:
            block@0: // L22
                let (greeting_value%0#0: bytes, greeting_exists%0#0: bool) = (app_global_get_ex 0u "greeting")
                (assert greeting_exists%0#0) // check greeting exists
                let tmp%0#0: bytes = (concat greeting_value%0#0 " ")
                let tmp%1#0: bytes = (concat tmp%0#0 name#0)
                return tmp%1#0
    
    program clear-state:
        subroutine test_cases.compile.factory.Hello.clear_state_program() -> bool:
            block@0: // L12
                return 1u